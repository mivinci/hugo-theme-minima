[{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code    Code Blocks Code block without code highlighting \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with HTML 1 2 3 4 5 6 7 8 9 10  \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Code block with Go 1 2 3 4 5  type Registry interface { Register(*Service, ...RegisterOption) error Deregister(*Service, ...DeregisterOption) error  List(string, ...ListOption) ([]*Service, error) }   Code block with C艹 1 2 3 4 5 6 7 8 9 10 11  #include \u0026lt;iostream\u0026gt; class Animal { string name; public: void eat(); } void Animal::eat() { std::cout \u0026lt;\u0026lt; \u0026#34;eat something\u0026#34; \u0026lt;\u0026lt; std::endl; }   Code block with Java 1 2 3 4 5 6 7 8 9 10 11 12 13  class Animal { void speak() { /* speak */ } } class Dog extends Animal { @override void speak() { /* bark */ } } class Cat extends Animal { @override void speak() { /* mew */ } }   Code block with Python 1 2 3 4 5 6  class Dog(Animal): def __init__(self): super.__init__() def eat(): pass   List Types Ordered List  First item Second item Third item   checked not checked  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese      The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","permalink":"https://mivinci.github.io/hugo-theme-minima/markdown-syntax/","summary":"\u003cp\u003eThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\u003c/p\u003e","title":"Markdown Syntax Guide"},{"content":"Examples The following are some examples of the diagrams, charts and graphs that can be made using Mermaid. Click here to jump into the full syntax.\nFlowchart flowchart LR A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] will be rendered as:\nflowchart LR A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] Sequence diagram sequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! will be rendered as:\nsequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! Gantt chart gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d will be rendered as:\ngantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d Class diagram classDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt;Interface\u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am I? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt;service\u0026gt;\u0026gt; int id size() } will be rendered as:\nclassDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt;Interface\u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am I? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt;service\u0026gt;\u0026gt; int id size() } State diagram stateDiagram-v2 [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*] will be rendered as:\nstateDiagram-v2 [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*] Pie chart pie \u0026quot;Dogs\u0026quot; : 386 \u0026quot;Cats\u0026quot; : 85.9 \u0026quot;Rats\u0026quot; : 15 will be rendered as:\npie \u0026quot;Dogs\u0026quot; : 386 \u0026quot;Cats\u0026quot; : 85.9 \u0026quot;Rats\u0026quot; : 15 User Journey diagram  journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 3: Me will be rendered as:\njourney title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 3: Me C4 diagram C4Context title System Context diagram for Internet Banking System Person(customerA, \u0026quot;Banking Customer A\u0026quot;, \u0026quot;A customer of the bank, with personal bank accounts.\u0026quot;) Person(customerB, \u0026quot;Banking Customer B\u0026quot;) Person_Ext(customerC, \u0026quot;Banking Customer C\u0026quot;) System(SystemAA, \u0026quot;Internet Banking System\u0026quot;, \u0026quot;Allows customers to view information about their bank accounts, and make payments.\u0026quot;) Person(customerD, \u0026quot;Banking Customer D\u0026quot;, \u0026quot;A customer of the bank, \u0026lt;br/\u0026gt; with personal bank accounts.\u0026quot;) Enterprise_Boundary(b1, \u0026quot;BankBoundary\u0026quot;) { SystemDb_Ext(SystemE, \u0026quot;Mainframe Banking System\u0026quot;, \u0026quot;Stores all of the core banking information about customers, accounts, transactions, etc.\u0026quot;) System_Boundary(b2, \u0026quot;BankBoundary2\u0026quot;) { System(SystemA, \u0026quot;Banking System A\u0026quot;) System(SystemB, \u0026quot;Banking System B\u0026quot;, \u0026quot;A system of the bank, with personal bank accounts.\u0026quot;) } System_Ext(SystemC, \u0026quot;E-mail system\u0026quot;, \u0026quot;The internal Microsoft Exchange e-mail system.\u0026quot;) SystemDb(SystemD, \u0026quot;Banking System D Database\u0026quot;, \u0026quot;A system of the bank, with personal bank accounts.\u0026quot;) Boundary(b3, \u0026quot;BankBoundary3\u0026quot;, \u0026quot;boundary\u0026quot;) { SystemQueue(SystemF, \u0026quot;Banking System F Queue\u0026quot;, \u0026quot;A system of the bank, with personal bank accounts.\u0026quot;) SystemQueue_Ext(SystemG, \u0026quot;Banking System G Queue\u0026quot;, \u0026quot;A system of the bank, with personal bank accounts.\u0026quot;) } } BiRel(customerA, SystemAA, \u0026quot;Uses\u0026quot;) BiRel(SystemAA, SystemE, \u0026quot;Uses\u0026quot;) Rel(SystemAA, SystemC, \u0026quot;Sends e-mails\u0026quot;, \u0026quot;SMTP\u0026quot;) Rel(SystemC, customerA, \u0026quot;Sends e-mails to\u0026quot;) will be rendered as:\nC4Context title System Context diagram for Internet Banking System Person(customerA, \u0026quot;Banking Customer A\u0026quot;, \u0026quot;A customer of the bank, with personal bank accounts.\u0026quot;) Person(customerB, \u0026quot;Banking Customer B\u0026quot;) Person_Ext(customerC, \u0026quot;Banking Customer C\u0026quot;) System(SystemAA, \u0026quot;Internet Banking System\u0026quot;, \u0026quot;Allows customers to view information about their bank accounts, and make payments.\u0026quot;) Person(customerD, \u0026quot;Banking Customer D\u0026quot;, \u0026quot;A customer of the bank, \u0026lt;br/\u0026gt; with personal bank accounts.\u0026quot;) Enterprise_Boundary(b1, \u0026quot;BankBoundary\u0026quot;) { SystemDb_Ext(SystemE, \u0026quot;Mainframe Banking System\u0026quot;, \u0026quot;Stores all of the core banking information about customers, accounts, transactions, etc.\u0026quot;) System_Boundary(b2, \u0026quot;BankBoundary2\u0026quot;) { System(SystemA, \u0026quot;Banking System A\u0026quot;) System(SystemB, \u0026quot;Banking System B\u0026quot;, \u0026quot;A system of the bank, with personal bank accounts.\u0026quot;) } System_Ext(SystemC, \u0026quot;E-mail system\u0026quot;, \u0026quot;The internal Microsoft Exchange e-mail system.\u0026quot;) SystemDb(SystemD, \u0026quot;Banking System D Database\u0026quot;, \u0026quot;A system of the bank, with personal bank accounts.\u0026quot;) Boundary(b3, \u0026quot;BankBoundary3\u0026quot;, \u0026quot;boundary\u0026quot;) { SystemQueue(SystemF, \u0026quot;Banking System F Queue\u0026quot;, \u0026quot;A system of the bank, with personal bank accounts.\u0026quot;) SystemQueue_Ext(SystemG, \u0026quot;Banking System G Queue\u0026quot;, \u0026quot;A system of the bank, with personal bank accounts.\u0026quot;) } } BiRel(customerA, SystemAA, \u0026quot;Uses\u0026quot;) BiRel(SystemAA, SystemE, \u0026quot;Uses\u0026quot;) Rel(SystemAA, SystemC, \u0026quot;Sends e-mails\u0026quot;, \u0026quot;SMTP\u0026quot;) Rel(SystemC, customerA, \u0026quot;Sends e-mails to\u0026quot;) ","permalink":"https://mivinci.github.io/hugo-theme-minima/mermaid-diagrams/","summary":"Examples The following are some examples of the diagrams, charts and graphs that can be made using Mermaid. Click here to jump into the full syntax.\nFlowchart flowchart LR A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] will be rendered as:\nflowchart LR A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] Sequence diagram sequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you?","title":"Mermaid Diagrams"},{"content":"","permalink":"https://mivinci.github.io/hugo-theme-minima/link/","summary":"","title":"An External Link"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries like KaTeX the one that Minima uses. Here\u0026rsquo;s what you can do in the configuration file to enable it.\nmath: enable: false provider: katex Examples The following are some examples of mathematical notations with KaTeX that are pretty much like LaTeX\u0026rsquo;s.\nBlock \\varphi = 1+\\frac{1}{1+\\frac{1}{1+\\frac{1} {1+\\cdots}}} wiil be rendered as:\n$$ \\varphi = 1+\\frac{1}{1+\\frac{1}{1+\\frac{1} {1+\\cdots}}} $$\nInline Pythagorean theorem can be written as $a^2+b^2=c^2$ where *a*, *b* and *c* are the length of legs of a triangle. will be rendered as:\nPythagorean theorem can be written as $a^2+b^2=c^2$ where a, b and c are the length of legs of a triangle.\n","permalink":"https://mivinci.github.io/hugo-theme-minima/math-typesetting/","summary":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries like KaTeX the one that Minima uses. Here\u0026rsquo;s what you can do in the configuration file to enable it.\nmath: enable: false provider: katex Examples The following are some examples of mathematical notations with KaTeX that are pretty much like LaTeX\u0026rsquo;s.\nBlock \\varphi = 1+\\frac{1}{1+\\frac{1}{1+\\frac{1} {1+\\cdots}}} wiil be rendered as:\n$$ \\varphi = 1+\\frac{1}{1+\\frac{1}{1+\\frac{1} {1+\\cdots}}} $$","title":"Math Typesetting"},{"content":"A clean and minimal Hugo theme porting from Hexo Minima. Check out the example site.\n Note that the main branch is in development stage, UI or configuration may vary.\n Features  Dark mode Multilingual mode Code highlighting - VSCode dark+ Math - KaTeX Flowcharts - Mermaid Comment - Disqus, Utterances, Giscus Google analytics External link RSS  Usage Before using Minima, make sure you\u0026rsquo;ve got Hugo (extended version) installed on your device.\nInstallation You can use either git submodule or git clone to fetch this theme into the directory where Hugo places themes.\nGit Submodule 1  git submodule add --depth 1 https://github.com/mivinci/hugo-theme-minima.git themes/minima   Git Clone 1  git clone https://github.com/mivinci/hugo-theme-minima.git themes/minima   Configuration Follow exampleSite/config.yaml and edit your own one.\nSupported Front Matters    Attr Type Explanation     title string title   description string description   date string creation time   categories array category list   series array series list   tags array tag list   math bool enables math plugin   diagram bool enables diagram plugin   comment bool enable comment plugin   draft bool disallow being published   link string a URL to redirect to    Contribution I\u0026rsquo;m currently looking for i18n contributors :)\nFeedback Feedbacks are welcome here.\nStar History \nLicense Hugo Minima is MIT licensed.\n","permalink":"https://mivinci.github.io/hugo-theme-minima/about/","summary":"A clean and minimal Hugo theme porting from Hexo Minima. Check out the example site.\n Note that the main branch is in development stage, UI or configuration may vary.\n Features  Dark mode Multilingual mode Code highlighting - VSCode dark+ Math - KaTeX Flowcharts - Mermaid Comment - Disqus, Utterances, Giscus Google analytics External link RSS  Usage Before using Minima, make sure you\u0026rsquo;ve got Hugo (extended version) installed on your device.","title":"About"}]